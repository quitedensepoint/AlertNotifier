{"files":[{"id":"a13d6b83-3db1-4ead-bfdd-56fb4ab37f80","name":"SkypeChannel","type":"server_js","source":"function SkypeChannel(){\n  \n  this.aOptions \u003d {\n    \"server\": \"http://web.infinet.space\",\n    \"port\": \"5280\",\n    \"sharedSecret\": \"ncs1234\",\n    \"chatId\": \"555f13d1591015f2117f823693398807\"    \n  }\n\n  //555f13d1591015f2117f823693398807 CODYTEST\n  //a9b7868a05aa0f155d895fc792e7eb4a NCS GROUP\n  //Build the valid API url from option parameters\n  \n  \n  this.getMessages \u003d function(chatId){\n    //No need to currently get messages. May be needed in future.\n  }\n  \n  this.sendMessage \u003d function(message){\n    this.url \u003d this.aOptions.server+\":\"+this.aOptions.port+\"/message/\"+this.aOptions.chatId+\"/\";\n    \n    var payload \u003d {\n      \"shared_secret\": this.aOptions.sharedSecret,\n      \"message\": message\n    }\n    var params \u003d {\n      \"method\":\"POST\",\n      \"payload\": payload\n    };\n\n    var response \u003d UrlFetchApp.fetch(this.url, params);\n  }\n}"},{"id":"01f70b84-4cc1-42b0-98b7-96dd83af4584","name":"Channel","type":"server_js","source":"//WIP\n\nfunction Channel(){\n  /*\n  if (this instanceof Channel){\n    throw \"Cannot instantiate abstract class! You must extend Channel.\";  \n  }\n  */\n}\n\nChannel.prototype.notify \u003d function(){\n  throw \"Abstract method! You must implement notify in your subclass.\";\n}"},{"id":"e60492e6-3f5d-4bd3-ae34-5672cd3318f0","name":"Product","type":"server_js","source":"function Product(name){\n  this.name \u003d name;\n  this.contacts \u003d [];\n  this.alertSources \u003d [];\n}\n\nProduct.prototype.addContact \u003d function(contact){\n  if(!(contact instanceof Contact)){\n    throw \"Argument not a valid Contact.\"; \n  }\n  this.contacts.push(contact);\n}\n\nProduct.prototype.addContacts \u003d function(contactArr){\n  this.contacts.push.apply(this.contacts, contactArr);\n}\n\nProduct.prototype.removeContact \u003d function(contact){\n  if(!(contact instanceof Contact)){\n    throw \"Argument not a valid Contact.\"; \n  }\n  var index \u003d this.contacts.indexOf(contact);\n  if(index !\u003d\u003d -1) {\n    this.contacts.splice(index, 1);   \n  } else {\n    throw \"Product does not currently have given Contact!\";\n  }\n}\n\nProduct.prototype.removeContacts \u003d function(contactArr){\n  for(var i \u003d 0; i \u003c contactArr.length; i++){\n    this.removeContact(contactArr[i]); \n  }  \n}\n\nProduct.prototype.getContacts \u003d function(){\n  return this.contacts;\n}\n\nProduct.prototype.sendAlert \u003d function(message){\n  this.contacts.forEach(function(contact){\n    new SMSChannel(contact.phoneNumber).notify(message);\n  });\n}\n\nProduct.prototype.addAlertSource \u003d function(alertSource){\n  if(!(alertSource instanceof AlertSource)){\n    throw \"Argument not a valid AlertSource.\"; \n  }\n  this.alertSources.push(alertSource);\n}\n\nProduct.prototype.addAlertSources \u003d function(alertSourceArr){\n  for(var i \u003d 0; i \u003c alertSourceArr.length; i++){\n    this.addAlertSource(alertSourceArr[i]); \n  } \n}\n\nProduct.prototype.removeAlertSource \u003d function(alertSource){\n  if(!(alertSource instanceof AlertSource)){\n    throw \"Argument not a valid AlertSource.\"; \n  }\n  var index \u003d this.alertSources.indexOf(alertSource);\n  if(index !\u003d\u003d -1) {\n    this.alertSources.splice(index, 1);   \n  } else {\n    throw \"Product does not currently have given AlertSource!\";\n  }\n}\n\nProduct.prototype.removeAlertSources \u003d function(alertSourceArr){\n  for(var i \u003d 0; i \u003c alertSourceArr.length; i++){\n    this.removeAlertSource(alertSourceArr[i]); \n  } \n}\n\nProduct.prototype.getAlertSources \u003d function(){\n  return this.alertSources;\n}\n\nProduct.prototype.getAlerts \u003d function(label){\n  var alerts \u003d [];\n  this.getAlertSources().forEach(function(alertSource){\n    alerts.push.apply(alerts, alertSource.getAlerts(label));\n  });  \n  Logger.log(\"Found \"+alerts.length+\" alerts.\");\n  return alerts;\n}\n\nProduct.prototype.sendAlerts \u003d function(alertArr, deactivate){\n  Logger.log(\"Sending \"+alertArr.length+\" alerts for product \"+this.name);\n  for(var i \u003d 0; i \u003c alertArr.length; i++){\n    Logger.log(\"Sending alert for the alert with subject: \"+alertArr[i].subject);\n    this.sendAlert(alertArr[i]);\n  }\n  if(deactivate){\n    for(var i \u003d 0; i \u003c this.alertSources.length; i++){\n      this.alertSources[i].deactivateAlerts(this.name);\n    }\n  }\n}\n      \nProduct.prototype.sendAlert \u003d function(alert){\n  for(var i \u003d 0; i \u003c this.contacts.length; i++){\n    Logger.log(\"Notifying contact \"+this.contacts[i].contact.getFullName());\n    this.contacts[i].notify(alert);\n  }\n}\n\nProduct.prototype.sendAutoAlerts \u003d function(){\n  this.sendAlerts(this.getAlerts(this.name), true); \n}"},{"id":"f895ba20-9d83-4f49-a7ef-6930df5a2b79","name":"AlertSource","type":"server_js","source":"function AlertSource(){\n  /*\n  if (this instanceof AlertSource){\n    throw \"Cannot instantiate abstract class! You must extend AlertSource.\";  \n  }\n  */\n}\n\nAlertSource.prototype.getAlerts \u003d function(){\n  throw \"Abstract method! You must implement the getAlerts method in your subclass.\";\n}\n\nAlertSource.prototype.deactivateAlerts \u003d function(){\n  throw \"Abstract method! You must implement deactivateAlerts method in your subclass.\";\n}"},{"id":"3c732729-cbbb-41ed-bfb4-be8f3bda0ca9","name":"SMSChannel","type":"server_js","source":"function SMSChannel(phoneNumber){\n  Channel.apply(this);\n  function convertToEmail(phoneNumber, carrier){\n    //provide dictionary key for sms -\u003e email\n    var SMSToEmailDict \u003d {\n      \"Verizon Wireless\":\"@vtext.com\"    \n    }\n    return phoneNumber+SMSToEmailDict[carrier];\n  }\n  var lookupService \u003d new TwilioPhoneLookupService();\n  this.email \u003d convertToEmail(phoneNumber, lookupService.getCarrier(phoneNumber));\n  Logger.log(\"Converted \"+phoneNumber+\" to \"+this.email);\n}\n\nSMSChannel.prototype \u003d Object.create(Channel.prototype);\nSMSChannel.prototype.constructor \u003d SMSChannel;\n\nSMSChannel.prototype.notify \u003d function(alert){\n  if(!(alert instanceof Alert)){\n    throw \u0027Argument must be an Alert.\u0027;\n  }\n  Logger.log(\"SMSChannel is sending an email to \"+this.email+\" with the subject \"+alert.subject);\n  GmailApp.sendEmail(this.email, alert.subject, alert.message);  \n}\n\nfunction test(){\n  var channel \u003d new SMSChannel(\"9106165553\");\n  var alerts \u003d [];\n  alerts.push(new Alert(\"Test\", \"Hello\"));\n  channel.notify(alerts);\n}"},{"id":"5096c4d8-2748-4ae0-abe7-bed31ff7eb05","name":"PhoneLookupService","type":"server_js","source":"function PhoneLookupService(){\n  /*\n  if (this instanceof PhoneLookupService){\n    throw \"Cannot instantiate abstract class! You must extend PhoneLookupService.\";  \n  }\n  */\n}\n\nPhoneLookupService.prototype.getCarrier \u003d function(){\n  throw \"Abstract method! You must implement the getCarrier method in your subclass.\";\n}\n\nPhoneLookupService.prototype.isValidPhoneNumber \u003d function(phoneNumber){  \n  if(phoneNumber.length !\u003d\u003d 11 \u0026\u0026 phoneNumber.length !\u003d\u003d 10){\n    return false;\n  }\n  return true;\n}"},{"id":"65555349-1c26-488e-b1ec-a89fb6590a7a","name":"TwilioPhoneLookupService","type":"server_js","source":"function TwilioPhoneLookupService() {\n  PhoneLookupService.call(this);\n  this.username \u003d \"ACf6c1dfab71d78b2cba7fa1f8e399717f\";\n  this.password \u003d \"ba56b0c812fa21121f15d4bf682f1a6c\";\n}\n\nTwilioPhoneLookupService.prototype \u003d Object.create(PhoneLookupService.prototype);\nTwilioPhoneLookupService.prototype.constructor \u003d TwilioPhoneLookupService;\n\nTwilioPhoneLookupService.prototype.getCarrier \u003d function(phoneNumber){\n  return this.fetchData(phoneNumber).carrier.name;\n}\n\nTwilioPhoneLookupService.prototype.fetchData \u003d function(phoneNumber){\n  var url \u003d \"https://lookups.twilio.com/v1/PhoneNumbers/\"+phoneNumber+\"?Type\u003dcarrier\";\n  var headers \u003d {\n    \"Authorization\" : \"Basic \" + Utilities.base64Encode(this.username + \u0027:\u0027 + this.password)\n  };  \n  var params \u003d {\n    \"method\":\"GET\",\n    \"headers\":headers\n  };\n  var response \u003d UrlFetchApp.fetch(url, params);\n  if(response.getResponseCode() !\u003d\u003d 200){\n    throw \u0027Error retrieving phone lookup information.\u0027;\n  }\n  var data \u003d JSON.parse(response.getContentText());\n  return data;\n}\n"},{"id":"bec1f83e-0e01-47de-b4a8-67abf2a73409","name":"GmailAlertSource","type":"server_js","source":"function GmailAlertSource(){\n  AlertSource.apply(this);  \n}\n\nGmailAlertSource.prototype \u003d Object.create(AlertSource.prototype);\nGmailAlertSource.prototype.constructor \u003d GmailAlertSource;\n\nGmailAlertSource.prototype.getAlerts \u003d function(label){\n  var alerts \u003d [];\n  \n  //Label name check workaround. GmailApp.getUserLabelByName returning undefined for some reason.\n  var labels \u003d GmailApp.getUserLabels();\n  for(var i \u003d 0; i \u003c labels.length; i++){\n    if(labels[i].getName() \u003d\u003d label || label.indexOf(labels[i].getName()) \u003e -1){\n      var alertLabel \u003d labels[i];\n      break;\n    }\n  }\n  \n  var threads \u003d alertLabel.getThreads();\n  for (var i \u003d 0; i \u003c threads.length; i++) {          \n    var message \u003d threads[i].getMessages()[0];\n    var subject \u003d message.getSubject();\n    var body \u003d message.getPlainBody();\n    alerts.push(new Alert(subject, body));\n  }\n  \n  return alerts;\n}\n\nGmailAlertSource.prototype.deactivateAlerts \u003d function(label){\n  //Removes the alert label from matching emails\n  var labels \u003d GmailApp.getUserLabels();\n  for(var i \u003d 0; i \u003c labels.length; i++){\n    if(labels[i].getName() \u003d\u003d label || label.indexOf(labels[i].getName()) \u003e -1){\n      var alertLabel \u003d labels[i];\n      break;\n    }\n  }\n  \n  var threads \u003d alertLabel.getThreads();\n  \n  for (var i \u003d 0; i \u003c threads.length; i++) {      \n    threads[i].removeLabel(alertLabel);         \n  }  \n}"},{"id":"6789e73e-4412-4a12-b273-a281c31a526c","name":"Alert","type":"server_js","source":"function Alert(subject, message){\n  this.subject \u003d subject;\n  this.message \u003d message;\n}\n"},{"id":"eaeb448d-f256-42fa-b95d-daa7371eb03e","name":"Contact","type":"server_js","source":"function Contact(contact){\n  //Utility class meant to extend the ContactsApp Contact class\n  this.contact \u003d contact;\n}\n\nContact.prototype.notify \u003d function(alert){\n  Logger.log(\"Notifying contact: \"+this.contact.getFullName());\n  if(this.contact.getPhones() !\u003d\u003d null){\n    Logger.log(\"Sending message to \"+this.contact.getPhones()[0].getPhoneNumber());\n    var channel \u003d new SMSChannel(this.contact.getPhones()[0].getPhoneNumber());\n    channel.notify(alert);\n  }\n}"},{"id":"afb65e68-0cf2-4882-ab4f-3ccf7fb95616","name":"ContactSource","type":"server_js","source":"function ContactSource(){\n  if (this instanceof ContactSource){\n    throw \"Cannot instantiate abstract class! You must extend ContactSource.\";  \n  }\n}\n\nContactSource.prototype.getCurrentContacts \u003d function(){\n  throw \"Abstract method! You must implement the getCurrentContacts method in your subclass.\";\n}\n\nContactSource.prototype.getNextContacts \u003d function(){\n  throw \"Abstract method! You must implement the getNextContacts method in your subclass.\";\n}\n\nContactSource.prototype.getBackupContacts \u003d function(){\n  throw \"Abstract method! You must implement the getBackupContacts method in your subclass.\";\n}\n\nContactSource.prototype.buildContact \u003d function(){\n  throw \"Abstract method! You must implement the buildContact method in your subclass.\";\n}\n"},{"id":"272ed6af-6a2c-490c-9dd7-acafeda99df7","name":"GCalContactSource","type":"server_js","source":"function GCalContactSource(calendarId){\n  this.calendar \u003d CalendarApp.getCalendarById(calendarId);\n  this.nameRegex \u003d /([A-Za-z]+\\_[A-Za-z]+)/;\n}\n\nGCalContactSource.prototype.getCurrentContacts \u003d function(tag){\n  //Returns contacts by applying regular expression to all currently ongoing events in given calendar\n  var now \u003d new Date();\n  var events \u003d this.calendar.getEventsForDay(now);\n  var contacts \u003d [];  \n  for(var i \u003d 0; i \u003c events.length; i++){\n    if(events[i].getStartTime() \u003c now \u0026\u0026 events[i].getEndTime() \u003e now){\n      var tempTitle \u003d events[i].getTitle();\n      if(tempTitle.indexOf(tag)!\u003d-1){\n        contacts.push(this.buildContact(events[i].getTitle()));  \n      }      \n    }\n  }\n  if(contacts.length \u003d\u003d\u003d 0){\n    var nextContacts \u003d this.getNextContacts(tag);\n    return nextContacts;\n  } else {\n    return contacts; \n  }  \n}\n\nGCalContactSource.prototype.getNextContacts \u003d function(tag){\n  //Returns contacts by applying regular expression to all currently ongoing events in given calendar\n  var now \u003d new Date();\n  var events \u003d this.calendar.getEventsForDay(now);\n  var contacts \u003d [];  \n  for(var i \u003d 0; i \u003c events.length; i++){\n    if(events[i].getStartTime() \u003e now){\n      var tempTitle \u003d events[i].getTitle();\n      if(tempTitle.indexOf(tag)!\u003d-1){\n        contacts.push(this.buildContact(tempTitle));  \n      }      \n    }\n  }\n  if(contacts.length \u003d\u003d\u003d 0) { throw new \u0027No next contacts found for \u0027+tag; }\n  return contacts\n}\n\nGCalContactSource.prototype.getBackupContacts \u003d function(){\n  //Returns contacts listed for All Day matching current regex, or throws error if none\n  throw \u0027There is no backup contact functionality built in to the calendar currently.\u0027;\n}\n\nGCalContactSource.prototype.getAllContactsByProduct \u003d function(tag){\n  var googleContacts \u003d ContactsApp.getContactsByCustomField(tag, \u0027Product\u0027);\n  var standardContacts  \u003d [];\n  for(var i \u003d 0; i \u003c googleContacts.length; i++){\n     standardContacts.push(new Contact(googleContacts[i]));\n  }\n  return standardContacts;\n}\n\nGCalContactSource.prototype.buildContact \u003d function(text){\n  var name \u003d this.nameRegex.exec(text)[1];\n  if(name \u003d\u003d\u003d null){ throw new \u0027Could not extract name from calendar.\u0027; }\n  return new Contact(ContactsApp.getContactsByCustomField(name, \"ShortName\")[0]);\n}"},{"id":"5f9dc864-3027-4d68-8285-d99e2f374098","name":"Main","type":"server_js","source":"function doGet(e){\n  var mailDelaySeconds \u003d 5;\n  var multiMessage \u003d false;\n  var digitalCalendarID \u003d \"ncs.media.ops@gmail.com\";\n  var writeLogs \u003d true;\n  var startTime \u003d new Date();\n  //This function is called doGet as that is required by Google in order to enable external GET request execution of this script in the event we need it.\n  //Fix labels with custom rules before execution\n  GmailLabelAdjuster();\n  \n  //Run NCS Digital alert notifier\n  \n  var ncsDigital \u003d new Product(\"DIGITAL\");\n  ncsDigital.addAlertSource(new GmailAlertSource());\n  Logger.log(\"Created Digital product object.\");  \n  \n  var alerts \u003d ncsDigital.getAlerts(ncsDigital.name);\n  if(alerts.length \u003e 0){\n    // lookup name from calendar, then lookup in contacts. If no name identified, \n    var contactSource \u003d new GCalContactSource(digitalCalendarID);\n    var contacts \u003d contactSource.getCurrentContacts(ncsDigital.name);\n    if(contacts.length \u003d\u003d\u003d 0){\n      //contacts \u003d contactSource.getAllContactsByProduct(ncsDigital.name);    \n      contacts.push(contactSource.buildContact(\"Cody_O\"));\n      multiMessage \u003d false;\n    }\n    \n    ncsDigital.addContacts(contacts);\n    \n    Logger.log(\"Added GCal contacts from \"+digitalCalendarID);\n    \n    Logger.log(\"Added new Gmail alert source.\");\n    \n    // send out 3 times sleep 3 sec between each send\n    if(multiMessage){\n      for(var i \u003d 0; i \u003c 2; i++){\n        ncsDigital.sendAlerts(ncsDigital.getAlerts(ncsDigital.name), true);\n        //Don\u0027t sleep. This adds too much exec time for Consumer GApps quota.\n        //Utilities.sleep(mailDelaySeconds * 1000);\n      }  \n    }   \n  \n    ncsDigital.sendAlerts(alerts, true);  \n  }    \n  var endTime \u003d new Date();\n  Logger.log(\"Exec time: \"+(endTime-startTime));\n  //End run NCS Digital alert notifier\n  \n  if(writeLogs){\n    saveLog();\n  }\n}"},{"id":"1afe2803-1027-4bf0-a6ca-b767099766fc","name":"GmailLabelAdjuster","type":"server_js","source":"function GmailLabelAdjuster(){\n  //Applies custom rules for Gmail labels that aren\u0027t available in custom ruleset\n  \n  //Moves emails to the DIGITAL label if labeled PRTG from 8:30AM-5:30PM EST\n  /*\n  function setDaytimePRTGAlerts(){\n    var alertLabel \u003d GmailApp.getUserLabelByName(\"PRTG\");       \n    var digitalLabel \u003d GmailApp.getUserLabelByName(\"DIGITAL\");\n    \n    var threads \u003d alertLabel.getThreads();\n    for(var i \u003d 0; i \u003c threads.length; i++){\n      var dateTime \u003d threads[i].getLastMessageDate().toString();\n      if(threads[i].getLastMessageDate() \u003e new Date().setHours(5,30) \u0026\u0026  threads[i].getLastMessageDate() \u003c new Date().setHours(14,30)){        \n        threads[i].addLabel(digitalLabel); \n        threads[i].removeLabel(alertLabel);\n      } else {\n        threads[i].removeLabel(alertLabel);\n      }\n    }\n  }\n  */\n  \n  function removeDaytimeDigitalAlerts(){\n    var label \u003d \"DIGITAL\";\n    \n    //Label name check workaround. GmailApp.getUserLabelByName returning undefined for some reason.\n    var labels \u003d GmailApp.getUserLabels();\n    for(var i \u003d 0; i \u003c labels.length; i++){\n      if(labels[i].getName() \u003d\u003d label || label.indexOf(labels[i].getName()) \u003e -1){\n        var alertLabel \u003d labels[i];\n        break;\n      }\n    }\n    \n    var threads \u003d alertLabel.getThreads();\n    for(var i \u003d 0; i \u003c threads.length; i++){\n      var dateTime \u003d threads[i].getLastMessageDate().toString();\n      if(threads[i].getLastMessageDate() \u003e new Date().setHours(5,30) \u0026\u0026  threads[i].getLastMessageDate() \u003c new Date().setHours(14,30)){        \n        threads[i].removeLabel(alertLabel);\n      }\n    }\n  }\n  \n  removeDaytimeDigitalAlerts();\n  //setDaytimePRTGAlerts();\n}"},{"id":"d6a3a56c-e3ae-491a-a52d-649ea3727d0b","name":"LogWriter","type":"server_js","source":"//Save all messages appended using the Logger.log function to a Drive file\nfunction saveLog(){\n  var logFolder \u003d DriveApp.getFoldersByName(\"AlertLogs\");\n  logFolder \u003d logFolder.next();\n  this.logFile \u003d logFolder.addFile(DriveApp.createFile(new Date().toString()+\".txt\", Logger.getLog()));\n}"}]}